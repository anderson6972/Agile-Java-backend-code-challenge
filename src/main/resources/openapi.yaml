openapi: 3.0.3
info:
  title: User Management API
  description: API to manage users with random data generation.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local server

paths:
  /users:
    get:
      summary: Retrieves all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Creates a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{username}:
    get:
      summary: Retrieves a user by username
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Updates user information
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Deletes a user
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/generate/{number}:
    get:
      summary: Generates random users using Random User Generator
      operationId: generateRandomUsers
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Users generated and stored successfully
        '400':
          description: Invalid number of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/tree:
    get:
      summary: Retrieves a tree of users grouped by country, state, and city
      operationId: getUsersTree
      responses:
        '200':
          description: User tree generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  usersTree:
                    type: object
                    additionalProperties:
                      type: object
                      additionalProperties:
                        type: object
                        additionalProperties:
                          type: array
                          items:
                            $ref: '#/components/schemas/UserData'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserData:
      type: object
      properties:
        username:
          type: string
          description: Unique username
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          format: email
          description: User's email
        gender:
          type: string
          enum: [male, female, other]
          description: User's gender
        photo:
          type: string
          description: URL of the user's photo
        country:
          type: string
          description: User's country
        state:
          type: string
          description: User's state or province
        city:
          type: string
          description: User's city

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Time when the error occurred (OffsetDateTime)
        status:
          type: integer
          description: HTTP response code
        error:
          type: string
          description: HTTP error message
        message:
          type: string
          description: Exception message
        path:
          type: string
          description: Path where the exception occurred
