Agile Contents - DesafÃ­o de cÃ³digo para backend en Java - README
DesafÃ­o de cÃ³digo
El propÃ³sito de esta prueba es validar tus habilidades tÃ©cnicas y organizativas. No es un gran problema si no puedes completarla; preferimos un cÃ³digo limpio e incompleto pero funcional, antes que un cÃ³digo desorganizado y "feo". EstÃ¡ bien si estableces una duraciÃ³n mÃ¡xima para el desafÃ­o.

Debes utilizar el lenguaje de programaciÃ³n Java y Spring Boot. Aparte de eso, queda a tu criterio cÃ³mo estructurar el cÃ³digo y quÃ© bibliotecas utilizar. TambiÃ©n puedes usar cualquier herramienta de generaciÃ³n de cÃ³digo como Spring Initializr o JHipster.

Por favor, crea un fork de este repositorio para que puedas trabajar en Ã©l como mejor te convenga. El Ãºnico requisito es que todo el cÃ³digo debe estar disponible en la rama master una vez que hayas terminado. TambiÃ©n puedes editar este documento si deseas incluir informaciÃ³n relevante, como instrucciones de compilaciÃ³n y ejecuciÃ³n, que nos sean Ãºtiles.

Ten en cuenta que, una vez finalizado el desafÃ­o de cÃ³digo, lo revisaremos y es posible que te pidamos realizar una revisiÃ³n conjunta del cÃ³digo para conocer un poco mÃ¡s sobre el proyecto y su estructura.

IMPORTANTE: Estaremos encantados de responder cualquier pregunta o escuchar cualquier sugerencia sobre el desafÃ­o de cÃ³digo, asÃ­ que no dudes en preguntar.

Funcionalidades
La aplicaciÃ³n a desarrollar debe gestionar una colecciÃ³n de usuarios con la siguiente informaciÃ³n:

Nombre de usuario (Ãºnico)
Nombre
Correo electrÃ³nico
GÃ©nero
Foto (solo la URL)
Los usuarios deben persistirse en una base de datos. Puedes usar cualquier base de datos de tu preferencia, ya sea relacional o no. Para mayor simplicidad, se recomienda usar una base de datos en memoria o una integrada en la propia aplicaciÃ³n.

La aplicaciÃ³n debe proporcionar los siguientes servicios web en formato JSON:

/api/users/ (GET): devuelve la lista de todos los usuarios.
/api/users/{username}/ (GET): devuelve un Ãºnico usuario.
/api/users/ (POST): crea un usuario.
/api/users/{username}/ (PUT): actualiza la informaciÃ³n de un usuario.
/api/users/{username}/ (DELETE): elimina un usuario.
/api/users/generate/{number}/ (GET): genera un nÃºmero de usuarios aleatorios segÃºn el parÃ¡metro proporcionado. Para crear los usuarios debes utilizar el servicio Random User Generator. Los usuarios generados se agregarÃ¡n a la colecciÃ³n de usuarios existentes.
/api/users/tree/ (GET): devuelve un Ã¡rbol con los usuarios agrupados por paÃ­s, estado y ciudad (esto no puede hacerse en la base de datos).
Funcionalidades adicionales opcionales (solo si has completado las anteriores):
Pruebas unitarias (al menos para una clase).
PaginaciÃ³n de la lista de usuarios.
DocumentaciÃ³n de la API utilizando Swagger, Spring REST Docs o cualquier otra herramienta.
Por favor, como parte integral del desafÃ­o, actualiza este documento o agrega otro con las instrucciones necesarias para compilar, ejecutar o probar el proyecto. Por ejemplo, si se requiere una base de datos externa, proporciona los pasos necesarios para prepararla previamente, preferiblemente utilizando Docker u otra soluciÃ³n. No obstante, se prefiere el uso de una base de datos en memoria integrada para mayor simplicidad.


ğŸ“‚ src/main/java/com/miapp/
  â”œâ”€â”€ ğŸ“‚ domain/                          
  â”‚     â”œâ”€â”€ ğŸ“‚ model/                    
  â”‚     â”‚     â”œâ”€â”€ User.java               # ğŸ“Œ Modelo de usuario en el dominio
  â”‚     â”‚     â”œâ”€â”€ UserTree.java           # ğŸ“Œ Modelo del Ã¡rbol de usuarios
  â”‚     â”œâ”€â”€ ğŸ“‚ common/                    
  â”‚     â”‚     â”œâ”€â”€ Gender.java             # ğŸ“Œ Enum para gÃ©nero
  â”‚     â”œâ”€â”€ ğŸ“‚ exception/                 
  â”‚     â”‚     â”œâ”€â”€ UserNotFoundException.java # ğŸ“Œ ExcepciÃ³n personalizada
  â”‚
  â”œâ”€â”€ ğŸ“‚ port/                             
  â”‚     â”œâ”€â”€ ğŸ“‚ inbound/                   
  â”‚     â”‚     â”œâ”€â”€ UserServicePort.java    # ğŸ“Œ Interface de casos de uso consolidados
  â”‚     â”œâ”€â”€ ğŸ“‚ outbound/                  
  â”‚     â”‚     â”œâ”€â”€ UserRepositoryPort.java # ğŸ“Œ Interface para la persistencia
  â”‚     â”‚     â”œâ”€â”€ RandomUserApiPort.java  # ğŸ“Œ Interface para API de generaciÃ³n de usuarios
  â”‚
  â”œâ”€â”€ ğŸ“‚ application/                      
  â”‚     â”œâ”€â”€ UserService.java              # ğŸ“Œ Casos de uso consolidados
  â”‚     â”œâ”€â”€ ğŸ“‚ mapper/                    
  â”‚     â”‚     â”œâ”€â”€ UserMapper.java         # ğŸ“Œ Mapper DTO â†” Dominio
  â”‚
  â”œâ”€â”€ ğŸ“‚ adapter/                          
  â”‚     â”œâ”€â”€ ğŸ“‚ inbound/                   
  â”‚     â”‚     â”œâ”€â”€ ğŸ“‚ rest/               
  â”‚     â”‚     â”‚     â”œâ”€â”€ UserController.java   # ğŸ“Œ Controlador REST
  â”‚     â”‚     â”‚     â”œâ”€â”€ ğŸ“‚ dto/               
  â”‚     â”‚     â”‚     â”‚     â”œâ”€â”€ CustomUserDTO.java
  â”‚     â”‚     â”‚     â”‚     â”œâ”€â”€ UserTreeDTO.java
  â”‚     â”‚     â”‚     â”œâ”€â”€ ğŸ“‚ mapper/            
  â”‚     â”‚     â”‚     â”‚     â”œâ”€â”€ GeneratedUserMapper.java # ğŸ“Œ Mapper de OpenAPI a DTO
  â”‚     â”œâ”€â”€ ğŸ“‚ outbound/                 
  â”‚     â”‚     â”œâ”€â”€ ğŸ“‚ persistence/       
  â”‚     â”‚     â”‚     â”œâ”€â”€ UserEntity.java         # ğŸ“Œ Entidad JPA
  â”‚     â”‚     â”‚     â”œâ”€â”€ UserRepositoryAdapter.java # ğŸ“Œ ImplementaciÃ³n del repositorio
  â”‚     â”‚     â”‚     â”œâ”€â”€ UserEntityMapper.java   # ğŸ“Œ Mapper Dominio â†” Persistencia
  â”‚     â”‚     â”‚     â”œâ”€â”€ JpaUserRepository.java  # ğŸ“Œ Interface JPA Repository
  â”‚     â”‚     â”œâ”€â”€ ğŸ“‚ restclient/        
  â”‚     â”‚     â”‚     â”œâ”€â”€ RandomUserApiAdapter.java # ğŸ“Œ Cliente API externa





